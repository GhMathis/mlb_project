# Prediction sur le jeu de validation : Tibetvalid
prev.elasticnet<-predict(elasticnet,newx=as.matrix(Tibetvalid[,1:20]))
# Calcul du RMSE pour évaluer la qualité du modele
Results$RMSERegelasticnet[i]<-sqrt(mean((Tibetvalid[,21]-prev.elasticnet)^2))
#Stockage des coefficient associer à chaque variable ?
return(Results)
}
GradientBoosting <- function(Tibetapp, Tibetvalid, Results){
# entrainement du modele sur le jeu d'entrainement : Tibetapp
Gradboost<-gbm(SR~.,data=Tibetapp,distribution = 'gaussian',shrinkage=0.01,n.trees=3000)
# Prediction sur le jeu de validation : Tibetvalid
prev.GB<-predict(Gradboost,newdata=Tibetvalid[,1:20])
# Calcul du RMSE pour évaluer la qualité du modele
Results$RMSEGB[i]<-sqrt(mean((Tibetvalid[,21]-prev.GB)^2))
#Stockage des coefficient associer à chaque variable ?
return(Results)
}
svm.regression = function(Tibetapp, Tibetvalid, Results){
# entrainement du modele sur le jeu d'entrainement : Tibetapp
Modsvm = svm(SR~.,data=Tibetapp)
# Prediction sur le jeu de validation : Tibetvalid
prev.svm<-predict(Modsvm,newdata=Tibetvalid[,1:20])
# Calcul du RMSE pour évaluer la qualité du modele
Results$RMSESVM[i]<-sqrt(mean((Tibetvalid[,21]-prev.svm)^2))
return(Results)
}
Results<-matrix(0,ncol=15,nrow=1000,dimnames=list(1:1000,c("RMSERandomF","RMSERegLasso","RMSERegRidge","RMSERegelasticnet","RMSEGB","RMSESVM","RMSEResNeu","BestMod")))
Results<-matrix(0,ncol=8,nrow=1000,dimnames=list(1:1000,c("RMSERandomF","RMSERegLasso","RMSERegRidge","RMSERegelasticnet","RMSEGB","RMSESVM","RMSEResNeu","BestMod")))
Results<-as.data.frame(Results)
set.seed(100010)
cl <- detectCores() %>% -1 %>% makeCluster
registerDoParallel(cl)
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
#Foret Aléatoire
Results <- ForetAlea(Tibetapp,Tibetvalid,Results)
}
set.seed(100010)
cl <- detectCores() %>% -1 %>% makeCluster
registerDoParallel(cl)*
if(file.exists("Resultreg.txt")){
read.table("Resultreg.txt")
}else{
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Lasso
Results <- Lasso(Tibetapp,Tibetvalid,Results)
}
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Ridge
Results <- Ridge(Tibetapp,Tibetvalid,Results)
}
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Elasticnet
Results <- Elasticnet(Tibetapp,Tibetvalid,Results)
}
}
set.seed(100010)
cl <- detectCores() %>% -1 %>% makeCluster
cl <- detectCores() %>% -1 %>% makeCluster
registerDoParallel(cl)*
if(file.exists("Resultreg.txt")){
read.table("Resultreg.txt")
}else{
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Lasso
Results <- Lasso(Tibetapp,Tibetvalid,Results)
}
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Ridge
Results <- Ridge(Tibetapp,Tibetvalid,Results)
}
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Elasticnet
Results <- Elasticnet(Tibetapp,Tibetvalid,Results)
}
}
file.exists("Resultreg.txt")
Resultreg = read.table("Resultreg.txt")
registerDoParallel(cl)*
if(file.exists("Resultreg.txt")){
Resultreg = read.table("Resultreg.txt")
Results$RMSERegLasso = Resultreg$RMSERegLasso
Results$RMSERegRidge = Resultreg$RMSERegRidge
Results$RMSERegelasticnet = Resultreg$RMSERegelasticnet
}else{
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Lasso
Results <- Lasso(Tibetapp,Tibetvalid,Results)
}
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Ridge
Results <- Ridge(Tibetapp,Tibetvalid,Results)
}
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Elasticnet
Results <- Elasticnet(Tibetapp,Tibetvalid,Results)
}
}
registerDoParallel(cl)
if(file.exists("Resultreg.txt")){
Resultreg = read.table("Resultreg.txt")
Results$RMSERegLasso = Resultreg$RMSERegLasso
Results$RMSERegRidge = Resultreg$RMSERegRidge
Results$RMSERegelasticnet = Resultreg$RMSERegelasticnet
}else{
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Lasso
Results <- Lasso(Tibetapp,Tibetvalid,Results)
}
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Ridge
Results <- Ridge(Tibetapp,Tibetvalid,Results)
}
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Elasticnet
Results <- Elasticnet(Tibetapp,Tibetvalid,Results)
}
}
stopCluster(cl)
Results
set.seed(100010)
cl <- detectCores() %>% -1 %>% makeCluster
registerDoParallel(cl)
if(file.exists("Resultreg.txt")){
Resultreg = read.table("Resultreg.txt")
Results$RMSERegLasso = Resultreg$RMSERegLasso
Results$RMSERegRidge = Resultreg$RMSERegRidge
Results$RMSERegelasticnet = Resultreg$RMSERegelasticnet
}else{
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Lasso
Results <- Lasso(Tibetapp,Tibetvalid,Results)
}
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Ridge
Results <- Ridge(Tibetapp,Tibetvalid,Results)
}
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Elasticnet
Results <- Elasticnet(Tibetapp,Tibetvalid,Results)
}
}
stopCluster(cl)
str(Results)
set.seed(100010)
cl <- detectCores() %>% -1 %>% makeCluster
registerDoParallel(cl)
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
#Gradient boosting
Results <- GradientBoosting(Tibetapp,Tibetvalid,Results)
}
stopCluster(cl)
set.seed(100010)
cl <- detectCores() %>% -1 %>% makeCluster
registerDoParallel(cl)
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Support vector machine (mode regression)
Results <- svm.regression(Tibetapp,Tibetvalid,Results)
}
stopCluster(cl)
load(results)
load("results.rds")
readRDS("results.rds")
read.RDS("results.rds")
readRDS("results.rds")
data = readRDS("results.rds")
str(data)
data$RMSERandomF
mena(data$RMSERandomF)
mean(data$RMSERandomF)
write.table(data$RMSERandomF, "RMSERandomF.txt")
set.seed(100010)
cl <- detectCores() %>% -1 %>% makeCluster
registerDoParallel(cl)
if(file.exists("Resultforet.txt")){
Resultforet = read.table("Resultforet.txt")
Results$RMSERegLasso = Resultforet$RMSERandomF
}else{
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
#Foret Aléatoire
Results <- ForetAlea(Tibetapp,Tibetvalid,Results)
}
}
set.seed(100010)
cl <- detectCores() %>% -1 %>% makeCluster
registerDoParallel(cl)
if(file.exists("RMSERandomF.txt")){
Resultforet = read.table("RMSERandomF.txt")
Results$RMSERegLasso = Resultforet$RMSERandomF
}else{
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
#Foret Aléatoire
Results <- ForetAlea(Tibetapp,Tibetvalid,Results)
}
}
stopCluster(cl)
Results_long = Results%>%
select(starts_with("RMSE"))%>%
pivot_longer(everything())
Results_long$name = as.factor(Results_long$name)
levels(Results_long$name) = c("Grad.boost" ,"Random.F", "Elsast", "Lasso", "Ridge", "ResNeu", "SVM")
recap = Results_long%>%
group_by(name)%>%
summarise(mean.rmse = mean(value),
sd.rmse = sd(value))
ggplot()+
geom_sina(data=Results_long, aes(name, value), alpha = 0.2,shape=19, cex = 2,
method = "density")+
geom_point(data = recap, aes(name, mean.rmse), cex =2, col = "orange")+
geom_errorbar(data = recap,
aes(x= name, ymin=mean.rmse-sd.rmse, ymax=mean.rmse+sd.rmse),
cex =1.2, width=.1, position = position_dodge(0.5), col = "orange")+
labs(y= "Erreur moyenne",x ="Modèles")+
theme_bw()+
theme(line = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_blank(),
axis.ticks =  element_line(colour = "black"),
axis.text.x = element_text(colour = "black", size=20),
axis.text.y = element_text(colour = "black", size=20),
legend.title = element_text(colour = "black", size=20),
legend.title.align=0.5,
legend.text = element_text(colour = "black", size=18),
axis.title=element_text(size=28),
strip.background = element_rect(fill="white"))
Results_long = Results%>%
select(starts_with("RMSE"))%>%
pivot_longer(everything())
Resultforet = read.table("RMSERandomF.txt")
Resultforet
str(Resultforet)
set.seed(100010)
cl <- detectCores() %>% -1 %>% makeCluster
registerDoParallel(cl)
if(file.exists("RMSERandomF.txt")){
Resultforet = read.table("RMSERandomF.txt")
Results$RMSERegLasso = Resultforet$x
}else{
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
#Foret Aléatoire
Results <- ForetAlea(Tibetapp,Tibetvalid,Results)
}
}
stopCluster(cl)
Results_long = Results%>%
select(starts_with("RMSE"))%>%
pivot_longer(everything())
Results_long$name = as.factor(Results_long$name)
levels(Results_long$name) = c("Grad.boost" ,"Random.F", "Elsast", "Lasso", "Ridge", "ResNeu", "SVM")
recap = Results_long%>%
group_by(name)%>%
summarise(mean.rmse = mean(value),
sd.rmse = sd(value))
ggplot()+
geom_sina(data=Results_long, aes(name, value), alpha = 0.2,shape=19, cex = 2,
method = "density")+
geom_point(data = recap, aes(name, mean.rmse), cex =2, col = "orange")+
geom_errorbar(data = recap,
aes(x= name, ymin=mean.rmse-sd.rmse, ymax=mean.rmse+sd.rmse),
cex =1.2, width=.1, position = position_dodge(0.5), col = "orange")+
labs(y= "Erreur moyenne",x ="Modèles")+
theme_bw()+
theme(line = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_blank(),
axis.ticks =  element_line(colour = "black"),
axis.text.x = element_text(colour = "black", size=20),
axis.text.y = element_text(colour = "black", size=20),
legend.title = element_text(colour = "black", size=20),
legend.title.align=0.5,
legend.text = element_text(colour = "black", size=18),
axis.title=element_text(size=28),
strip.background = element_rect(fill="white"))
Results
set.seed(100010)
cl <- detectCores() %>% -1 %>% makeCluster
registerDoParallel(cl)
if(file.exists("RMSERandomF.txt")){
Resultforet = read.table("RMSERandomF.txt")
Results$RMSERandomF = Resultforet$x
}else{
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
#Foret Aléatoire
Results <- ForetAlea(Tibetapp,Tibetvalid,Results)
}
}
stopCluster(cl)
set.seed(100010)
cl <- detectCores() %>% -1 %>% makeCluster
registerDoParallel(cl)
if(file.exists("Resultreg.txt")){
Resultreg = read.table("Resultreg.txt")
Results$RMSERegLasso = Resultreg$RMSERegLasso
Results$RMSERegRidge = Resultreg$RMSERegRidge
Results$RMSERegelasticnet = Resultreg$RMSERegelasticnet
}else{
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Lasso
Results <- Lasso(Tibetapp,Tibetvalid,Results)
}
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Ridge
Results <- Ridge(Tibetapp,Tibetvalid,Results)
}
for (i in 1:1000){ # Faire des boucles séparées pour chaque methode en vérifant avant le temps que ça prend pour tourner une seule fois
#Sélection du jeu de données-Validation non croisée de Monte-Carlo
aleat<-sample(length(Tibet$A_Temp),250) #explication du 250 à faire
#Séparation en un jeu de données en un d'apprentissage et un de validation
Tibetapp<-Tibet[aleat,]
Tibetvalid<-Tibet[-aleat,]
##############################################################################
#Rajouter transformation des variables?Regression de poisson?package keras?
# Elasticnet
Results <- Elasticnet(Tibetapp,Tibetvalid,Results)
}
}
stopCluster(cl)
Results_long = Results%>%
select(starts_with("RMSE"))%>%
pivot_longer(everything())
Results_long$name = as.factor(Results_long$name)
levels(Results_long$name) = c("Grad.boost" ,"Random.F", "Elsast", "Lasso", "Ridge", "ResNeu", "SVM")
recap = Results_long%>%
group_by(name)%>%
summarise(mean.rmse = mean(value),
sd.rmse = sd(value))
ggplot()+
geom_sina(data=Results_long, aes(name, value), alpha = 0.2,shape=19, cex = 2,
method = "density")+
geom_point(data = recap, aes(name, mean.rmse), cex =2, col = "orange")+
geom_errorbar(data = recap,
aes(x= name, ymin=mean.rmse-sd.rmse, ymax=mean.rmse+sd.rmse),
cex =1.2, width=.1, position = position_dodge(0.5), col = "orange")+
labs(y= "Erreur moyenne",x ="Modèles")+
theme_bw()+
theme(line = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_blank(),
axis.ticks =  element_line(colour = "black"),
axis.text.x = element_text(colour = "black", size=20),
axis.text.y = element_text(colour = "black", size=20),
legend.title = element_text(colour = "black", size=20),
legend.title.align=0.5,
legend.text = element_text(colour = "black", size=18),
axis.title=element_text(size=28),
strip.background = element_rect(fill="white"))
